/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { WalletBalanceProvider } from "./WalletBalanceProvider";

export class WalletBalanceProviderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _provider: string,
    overrides?: Overrides
  ): Promise<WalletBalanceProvider> {
    return super.deploy(_provider, overrides || {}) as Promise<
      WalletBalanceProvider
    >;
  }
  getDeployTransaction(
    _provider: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_provider, overrides || {});
  }
  attach(address: string): WalletBalanceProvider {
    return super.attach(address) as WalletBalanceProvider;
  }
  connect(signer: Signer): WalletBalanceProviderFactory {
    return super.connect(signer) as WalletBalanceProviderFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WalletBalanceProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WalletBalanceProvider;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract LendingPoolAddressesProvider",
        name: "_provider",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address"
      },
      {
        internalType: "address",
        name: "_token",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address"
      }
    ],
    name: "getUserWalletBalances",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161080a38038061080a8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610776806100946000396000f3fe6080604052600436106100295760003560e01c80639e3c93091461007a578063f7888aec14610168575b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610714602e913960400191505060405180910390fd5b34801561008657600080fd5b506100c96004803603602081101561009d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101ed565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101105780820151818401526020810190506100f5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610152578082015181840152602081019050610137565b5050505090500194505050505060405180910390f35b34801561017457600080fd5b506101d76004803603604081101561018b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105bc565b6040518082815260200191505060405180910390f35b60608060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b15801561025957600080fd5b505afa15801561026d573d6000803e3d6000fd5b505050506040513d602081101561028357600080fd5b8101908080519060200190929190505050905060608173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160006040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561031c57600080fd5b810190808051604051939291908464010000000082111561033c57600080fd5b8382019150602082018581111561035257600080fd5b825186602082028301116401000000008211171561036f57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156103a657808201518184015260208101905061038b565b505050509050016040525050509050606081516040519080825280602002602001820160405280156103e75781602001602082028038833980820191505090505b50905060008090505b82518110156105ad578373ffffffffffffffffffffffffffffffffffffffff166305075d6e84838151811061042157fe5b60200260200101516040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561048957600080fd5b505afa15801561049d573d6000803e3d6000fd5b505050506040513d60208110156104b357600080fd5b81019080805190602001909291905050506104e75760008282815181106104d657fe5b6020026020010181815250506105a0565b6104ef6106ac565b73ffffffffffffffffffffffffffffffffffffffff1683828151811061051157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461056e576105518784838151811061054457fe5b60200260200101516105bc565b82828151811061055d57fe5b60200260200101818152505061059f565b8673ffffffffffffffffffffffffffffffffffffffff163182828151811061059257fe5b6020026020010181815250505b5b80806001019150506103f0565b50818194509450505050915091565b60006105dd8273ffffffffffffffffffffffffffffffffffffffff166106c8565b156106a1578173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d602081101561068957600080fd5b810190808051906020019092919050505090506106a6565b600090505b92915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561070a57506000801b8214155b9250505091905056fe57616c6c657442616c616e636550726f766964657220646f6573206e6f7420616363657074207061796d656e7473a265627a7a72315820a26288088b4c79f4ae7325313eda3a76d0c6463a3bfabf4ff0a8caf839547fb164736f6c63430005100032";
