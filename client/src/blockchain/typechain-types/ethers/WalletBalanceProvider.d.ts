/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WalletBalanceProviderInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "getUserWalletBalances(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWalletBalances",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserWalletBalances",
    data: BytesLike
  ): Result;

  events: {};
}

export class WalletBalanceProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WalletBalanceProviderInterface;

  functions: {
    /**
     * Check the token balance of a wallet in a token contract Returns the balance of the token for user. Avoids possible errors: - return 0 on non-contract address*
     */
    balanceOf(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * provides balances of user wallet for all reserves available on the pool
     */
    getUserWalletBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;
  };

  /**
   * Check the token balance of a wallet in a token contract Returns the balance of the token for user. Avoids possible errors: - return 0 on non-contract address*
   */
  balanceOf(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * provides balances of user wallet for all reserves available on the pool
   */
  getUserWalletBalances(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  callStatic: {
    /**
     * Check the token balance of a wallet in a token contract Returns the balance of the token for user. Avoids possible errors: - return 0 on non-contract address*
     */
    balanceOf(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * provides balances of user wallet for all reserves available on the pool
     */
    getUserWalletBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;
  };

  filters: {};

  estimateGas: {
    balanceOf(_user: string, _token: string): Promise<BigNumber>;
    getUserWalletBalances(_user: string): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(_user: string, _token: string): Promise<PopulatedTransaction>;
    getUserWalletBalances(_user: string): Promise<PopulatedTransaction>;
  };
}
