/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakePampTokenInterface extends ethers.utils.Interface {
  functions: {
    "transferHook(address,address,uint256,uint256,uint256)": FunctionFragment;
    "updateMyStakes(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "transferHook",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMyStakes",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "transferHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMyStakes",
    data: BytesLike
  ): Result;

  events: {};
}

export class StakePampToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakePampTokenInterface;

  functions: {
    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMyStakes(
      staker: string,
      balance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  transferHook(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    senderBalance: BigNumberish,
    recipientBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMyStakes(
    staker: string,
    balance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    updateMyStakes(
      staker: string,
      balance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish
    ): Promise<BigNumber>;
    updateMyStakes(
      staker: string,
      balance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateMyStakes(
      staker: string,
      balance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
