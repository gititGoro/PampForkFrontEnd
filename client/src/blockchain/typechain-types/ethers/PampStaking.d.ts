/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PampStakingInterface extends ethers.utils.Interface {
  functions: {
    "blacklist(address)": FunctionFragment;
    "checkPreviousStakingContractWhitelist()": FunctionFragment;
    "currentHoldersDayRewardedVersion()": FunctionFragment;
    "enableBurns()": FunctionFragment;
    "enableHoldersDay()": FunctionFragment;
    "enableUniswapDirectBurns()": FunctionFragment;
    "externalCalculator()": FunctionFragment;
    "freeze()": FunctionFragment;
    "holdersDayRewardDenominator()": FunctionFragment;
    "holdersDayRewarded(bytes32)": FunctionFragment;
    "increaseTransferFees()": FunctionFragment;
    "inflationAdjustmentFactor()": FunctionFragment;
    "lastNegativeUpdate()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "liquidityStakingContract()": FunctionFragment;
    "maxStakingDays()": FunctionFragment;
    "maxStreak()": FunctionFragment;
    "minPercentIncrease()": FunctionFragment;
    "minStake()": FunctionFragment;
    "minStakeDurationDays()": FunctionFragment;
    "negativeStreak()": FunctionFragment;
    "nextStakingContract()": FunctionFragment;
    "numStakers()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "previousStakingContract()": FunctionFragment;
    "priceTarget1Hit()": FunctionFragment;
    "priceTarget2Hit()": FunctionFragment;
    "stakers(address)": FunctionFragment;
    "streak()": FunctionFragment;
    "token()": FunctionFragment;
    "transferBurnPercent()": FunctionFragment;
    "uniswapSellerBurnPercent()": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniwhitelist(address)": FunctionFragment;
    "updates(uint256)": FunctionFragment;
    "useExternalCalc()": FunctionFragment;
    "useExternalCalcIterative()": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "updateState(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateStateNegative(int256,uint256,uint256,uint256)": FunctionFragment;
    "resetStakeTimeMigrateState(address)": FunctionFragment;
    "migratePreviousState()": FunctionFragment;
    "updateMyStakes(address,uint256,uint256)": FunctionFragment;
    "iterativelyCalculateOwedRewards(uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "calculateNumTokens(uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getDaysStaked(address)": FunctionFragment;
    "claimHoldersDay()": FunctionFragment;
    "updateHoldersDay(bool)": FunctionFragment;
    "updateTokenAddress(address)": FunctionFragment;
    "updateCalculator(address)": FunctionFragment;
    "updateUseExternalCalcIterative(bool)": FunctionFragment;
    "updateInflationAdjustmentFactor(uint256)": FunctionFragment;
    "updateStreak(bool,uint256)": FunctionFragment;
    "updateMinStakeDurationDays(uint8)": FunctionFragment;
    "updateMinStakes(uint256)": FunctionFragment;
    "updateMinPercentIncrease(uint8)": FunctionFragment;
    "updateEnableBurns(bool)": FunctionFragment;
    "updateWhitelist(address,string,bool)": FunctionFragment;
    "updateUniWhitelist(address,string,bool)": FunctionFragment;
    "updateBlacklist(address,uint256,bool)": FunctionFragment;
    "updateUniswapPair(address)": FunctionFragment;
    "updateEnableUniswapSellBurns(bool)": FunctionFragment;
    "updateUniswapSellBurnPercent(uint8)": FunctionFragment;
    "updateFreeze(bool)": FunctionFragment;
    "updateNextStakingContract(address)": FunctionFragment;
    "updateLiquidityStakingContract(address)": FunctionFragment;
    "updateOracle(address)": FunctionFragment;
    "updatePreviousStakingContract(address)": FunctionFragment;
    "updateTransferBurnFee(uint256)": FunctionFragment;
    "updateMaxStreak(uint256)": FunctionFragment;
    "updateMaxStakingDays(uint256)": FunctionFragment;
    "updateHoldersDayRewardDenominator(uint256)": FunctionFragment;
    "updateIncreaseTransferFees(bool)": FunctionFragment;
    "updateCheckPreviousContractWhitelist(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getStaker(address)": FunctionFragment;
    "removeLatestUpdate()": FunctionFragment;
    "mulDiv(uint256,uint256,uint256)": FunctionFragment;
    "transferHook(address,address,uint256,uint256,uint256)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "liquidityRewards(address,uint256)": FunctionFragment;
    "resetStakeTimeDebug(address,uint256,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "blacklist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkPreviousStakingContractWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentHoldersDayRewardedVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableBurns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableHoldersDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableUniswapDirectBurns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "freeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "holdersDayRewardDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holdersDayRewarded",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTransferFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inflationAdjustmentFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastNegativeUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityStakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakingDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxStreak", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minPercentIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minStakeDurationDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "negativeStreak",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextStakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numStakers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousStakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceTarget1Hit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceTarget2Hit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stakers", values: [string]): string;
  encodeFunctionData(functionFragment: "streak", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferBurnPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapSellerBurnPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniwhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useExternalCalc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useExternalCalcIterative",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateNegative",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetStakeTimeMigrateState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migratePreviousState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMyStakes",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "iterativelyCalculateOwedRewards",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNumTokens",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHoldersDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateHoldersDay",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUseExternalCalcIterative",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInflationAdjustmentFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStreak",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinStakeDurationDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinStakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinPercentIncrease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEnableBurns",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniWhitelist",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlacklist",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapPair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEnableUniswapSellBurns",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapSellBurnPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFreeze",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNextStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePreviousStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferBurnFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxStreak",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxStakingDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHoldersDayRewardDenominator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncreaseTransferFees",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCheckPreviousContractWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getStaker", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeLatestUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mulDiv",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferHook",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetStakeTimeDebug",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPreviousStakingContractWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentHoldersDayRewardedVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableHoldersDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUniswapDirectBurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holdersDayRewardDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdersDayRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflationAdjustmentFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastNegativeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStakingDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxStreak", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minPercentIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minStakeDurationDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "negativeStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numStakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceTarget1Hit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceTarget2Hit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "streak", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBurnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapSellerBurnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniwhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useExternalCalc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useExternalCalcIterative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateNegative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetStakeTimeMigrateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratePreviousState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMyStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iterativelyCalculateOwedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNumTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaysStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHoldersDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHoldersDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUseExternalCalcIterative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInflationAdjustmentFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinStakeDurationDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinPercentIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEnableBurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEnableUniswapSellBurns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapSellBurnPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNextStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePreviousStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferBurnFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxStakingDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHoldersDayRewardDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncreaseTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCheckPreviousContractWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLatestUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mulDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetStakeTimeDebug",
    data: BytesLike
  ): Result;

  events: {
    "HoldersDayEnabled()": EventFragment;
    "HoldersDayRewarded(uint256)": EventFragment;
    "MassiveCelebration()": EventFragment;
    "Migration(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakerAdded(address)": EventFragment;
    "StakerRemoved(address)": EventFragment;
    "StakesUpdated(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HoldersDayEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldersDayRewarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassiveCelebration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class PampStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PampStakingInterface;

  functions: {
    blacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    checkPreviousStakingContractWhitelist(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    currentHoldersDayRewardedVersion(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    enableBurns(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    enableHoldersDay(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    enableUniswapDirectBurns(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    externalCalculator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    freeze(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    holdersDayRewardDenominator(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    holdersDayRewarded(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    increaseTransferFees(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    inflationAdjustmentFactor(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastNegativeUpdate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastUpdate(
      overrides?: CallOverrides
    ): Promise<{
      timestamp: BigNumber;
      numerator: BigNumber;
      denominator: BigNumber;
      price: BigNumber;
      volume: BigNumber;
      streak: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    liquidityStakingContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    maxStakingDays(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    maxStreak(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minPercentIncrease(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    minStake(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    minStakeDurationDays(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    negativeStreak(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    nextStakingContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    numStakers(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    oracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    previousStakingContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priceTarget1Hit(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    priceTarget2Hit(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      startTimestamp: BigNumber;
      lastTimestamp: BigNumber;
      hasMigrated: boolean;
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    streak(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferBurnPercent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    uniswapSellerBurnPercent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    uniswapV2Pair(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    uniwhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      timestamp: BigNumber;
      numerator: BigNumber;
      denominator: BigNumber;
      price: BigNumber;
      volume: BigNumber;
      streak: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    useExternalCalc(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    useExternalCalcIterative(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateState(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStateNegative(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resetStakeTimeMigrateState(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    migratePreviousState(overrides?: Overrides): Promise<ContractTransaction>;

    updateMyStakes(
      stakerAddress: string,
      balance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    iterativelyCalculateOwedRewards(
      stakerLastTimestamp: BigNumberish,
      stakerStartTimestamp: BigNumberish,
      balance: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateNumTokens(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      _streak: BigNumberish,
      balance: BigNumberish,
      daysStaked: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDaysStaked(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimHoldersDay(overrides?: Overrides): Promise<ContractTransaction>;

    updateHoldersDay(
      _enableHoldersDay: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenAddress(
      newToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCalculator(
      calc: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUseExternalCalcIterative(
      _useExternalCalcIterative: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateInflationAdjustmentFactor(
      _inflationAdjustmentFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateStreak(
      negative: boolean,
      _streak: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMinStakeDurationDays(
      _minStakeDurationDays: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMinStakes(
      _minStake: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMinPercentIncrease(
      _minIncrease: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateEnableBurns(
      _enabledBurns: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateWhitelist(
      addr: string,
      reason: string,
      remove: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniWhitelist(
      addr: string,
      reason: string,
      remove: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateBlacklist(
      addr: string,
      fee: BigNumberish,
      remove: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniswapPair(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateEnableUniswapSellBurns(
      _enableDirectSellBurns: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniswapSellBurnPercent(
      _sellerBurnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFreeze(
      _enableFreeze: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateNextStakingContract(
      nextContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateLiquidityStakingContract(
      _liquidityStakingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePreviousStakingContract(
      previousContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTransferBurnFee(
      _transferBurnFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMaxStreak(
      _maxStreak: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMaxStakingDays(
      _maxStakingDays: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateHoldersDayRewardDenominator(
      _holdersDayRewardDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateIncreaseTransferFees(
      _increaseTransferFees: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCheckPreviousContractWhitelist(
      _checkPreviousStakingContractWhitelist: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getStaker(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    removeLatestUpdate(overrides?: Overrides): Promise<ContractTransaction>;

    mulDiv(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidityRewards(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resetStakeTimeDebug(
      account: string,
      startTimestamp: BigNumberish,
      lastTimestamp: BigNumberish,
      migrated: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  blacklist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkPreviousStakingContractWhitelist(
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentHoldersDayRewardedVersion(overrides?: CallOverrides): Promise<number>;

  enableBurns(overrides?: CallOverrides): Promise<boolean>;

  enableHoldersDay(overrides?: CallOverrides): Promise<boolean>;

  enableUniswapDirectBurns(overrides?: CallOverrides): Promise<boolean>;

  externalCalculator(overrides?: CallOverrides): Promise<string>;

  freeze(overrides?: CallOverrides): Promise<boolean>;

  holdersDayRewardDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  holdersDayRewarded(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseTransferFees(overrides?: CallOverrides): Promise<boolean>;

  inflationAdjustmentFactor(overrides?: CallOverrides): Promise<BigNumber>;

  lastNegativeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdate(
    overrides?: CallOverrides
  ): Promise<{
    timestamp: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    price: BigNumber;
    volume: BigNumber;
    streak: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  liquidityStakingContract(overrides?: CallOverrides): Promise<string>;

  maxStakingDays(overrides?: CallOverrides): Promise<BigNumber>;

  maxStreak(overrides?: CallOverrides): Promise<BigNumber>;

  minPercentIncrease(overrides?: CallOverrides): Promise<number>;

  minStake(overrides?: CallOverrides): Promise<BigNumber>;

  minStakeDurationDays(overrides?: CallOverrides): Promise<number>;

  negativeStreak(overrides?: CallOverrides): Promise<BigNumber>;

  nextStakingContract(overrides?: CallOverrides): Promise<string>;

  numStakers(overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  previousStakingContract(overrides?: CallOverrides): Promise<string>;

  priceTarget1Hit(overrides?: CallOverrides): Promise<boolean>;

  priceTarget2Hit(overrides?: CallOverrides): Promise<boolean>;

  stakers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    startTimestamp: BigNumber;
    lastTimestamp: BigNumber;
    hasMigrated: boolean;
    0: BigNumber;
    1: BigNumber;
    2: boolean;
  }>;

  streak(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  transferBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapSellerBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniwhitelist(arg0: string, overrides?: CallOverrides): Promise<string>;

  updates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    timestamp: BigNumber;
    numerator: BigNumber;
    denominator: BigNumber;
    price: BigNumber;
    volume: BigNumber;
    streak: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  useExternalCalc(overrides?: CallOverrides): Promise<boolean>;

  useExternalCalcIterative(overrides?: CallOverrides): Promise<boolean>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<string>;

  updateState(
    numerator: BigNumberish,
    denominator: BigNumberish,
    price: BigNumberish,
    volume: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStateNegative(
    numerator: BigNumberish,
    denominator: BigNumberish,
    price: BigNumberish,
    volume: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resetStakeTimeMigrateState(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  migratePreviousState(overrides?: Overrides): Promise<ContractTransaction>;

  updateMyStakes(
    stakerAddress: string,
    balance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  iterativelyCalculateOwedRewards(
    stakerLastTimestamp: BigNumberish,
    stakerStartTimestamp: BigNumberish,
    balance: BigNumberish,
    stakerAddress: string,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateNumTokens(
    numerator: BigNumberish,
    denominator: BigNumberish,
    price: BigNumberish,
    volume: BigNumberish,
    _streak: BigNumberish,
    balance: BigNumberish,
    daysStaked: BigNumberish,
    stakerAddress: string,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDaysStaked(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimHoldersDay(overrides?: Overrides): Promise<ContractTransaction>;

  updateHoldersDay(
    _enableHoldersDay: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenAddress(
    newToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCalculator(
    calc: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUseExternalCalcIterative(
    _useExternalCalcIterative: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateInflationAdjustmentFactor(
    _inflationAdjustmentFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateStreak(
    negative: boolean,
    _streak: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMinStakeDurationDays(
    _minStakeDurationDays: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMinStakes(
    _minStake: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMinPercentIncrease(
    _minIncrease: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateEnableBurns(
    _enabledBurns: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateWhitelist(
    addr: string,
    reason: string,
    remove: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniWhitelist(
    addr: string,
    reason: string,
    remove: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateBlacklist(
    addr: string,
    fee: BigNumberish,
    remove: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniswapPair(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateEnableUniswapSellBurns(
    _enableDirectSellBurns: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniswapSellBurnPercent(
    _sellerBurnPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFreeze(
    _enableFreeze: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateNextStakingContract(
    nextContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateLiquidityStakingContract(
    _liquidityStakingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOracle(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePreviousStakingContract(
    previousContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTransferBurnFee(
    _transferBurnFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMaxStreak(
    _maxStreak: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMaxStakingDays(
    _maxStakingDays: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateHoldersDayRewardDenominator(
    _holdersDayRewardDenominator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateIncreaseTransferFees(
    _increaseTransferFees: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCheckPreviousContractWhitelist(
    _checkPreviousStakingContractWhitelist: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getStaker(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: boolean;
  }>;

  removeLatestUpdate(overrides?: Overrides): Promise<ContractTransaction>;

  mulDiv(
    x: BigNumberish,
    y: BigNumberish,
    z: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferHook(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    senderBalance: BigNumberish,
    recipientBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burn(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidityRewards(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resetStakeTimeDebug(
    account: string,
    startTimestamp: BigNumberish,
    lastTimestamp: BigNumberish,
    migrated: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    blacklist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPreviousStakingContractWhitelist(
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentHoldersDayRewardedVersion(
      overrides?: CallOverrides
    ): Promise<number>;

    enableBurns(overrides?: CallOverrides): Promise<boolean>;

    enableHoldersDay(overrides?: CallOverrides): Promise<boolean>;

    enableUniswapDirectBurns(overrides?: CallOverrides): Promise<boolean>;

    externalCalculator(overrides?: CallOverrides): Promise<string>;

    freeze(overrides?: CallOverrides): Promise<boolean>;

    holdersDayRewardDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    holdersDayRewarded(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseTransferFees(overrides?: CallOverrides): Promise<boolean>;

    inflationAdjustmentFactor(overrides?: CallOverrides): Promise<BigNumber>;

    lastNegativeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(
      overrides?: CallOverrides
    ): Promise<{
      timestamp: BigNumber;
      numerator: BigNumber;
      denominator: BigNumber;
      price: BigNumber;
      volume: BigNumber;
      streak: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    liquidityStakingContract(overrides?: CallOverrides): Promise<string>;

    maxStakingDays(overrides?: CallOverrides): Promise<BigNumber>;

    maxStreak(overrides?: CallOverrides): Promise<BigNumber>;

    minPercentIncrease(overrides?: CallOverrides): Promise<number>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    minStakeDurationDays(overrides?: CallOverrides): Promise<number>;

    negativeStreak(overrides?: CallOverrides): Promise<BigNumber>;

    nextStakingContract(overrides?: CallOverrides): Promise<string>;

    numStakers(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    previousStakingContract(overrides?: CallOverrides): Promise<string>;

    priceTarget1Hit(overrides?: CallOverrides): Promise<boolean>;

    priceTarget2Hit(overrides?: CallOverrides): Promise<boolean>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      startTimestamp: BigNumber;
      lastTimestamp: BigNumber;
      hasMigrated: boolean;
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    streak(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transferBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapSellerBurnPercent(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniwhitelist(arg0: string, overrides?: CallOverrides): Promise<string>;

    updates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      timestamp: BigNumber;
      numerator: BigNumber;
      denominator: BigNumber;
      price: BigNumber;
      volume: BigNumber;
      streak: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    useExternalCalc(overrides?: CallOverrides): Promise<boolean>;

    useExternalCalcIterative(overrides?: CallOverrides): Promise<boolean>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<string>;

    updateState(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateStateNegative(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    resetStakeTimeMigrateState(
      addr: string,
      overrides?: Overrides
    ): Promise<{
      startTimestamp: BigNumber;
      lastTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    migratePreviousState(overrides?: Overrides): Promise<void>;

    updateMyStakes(
      stakerAddress: string,
      balance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    iterativelyCalculateOwedRewards(
      stakerLastTimestamp: BigNumberish,
      stakerStartTimestamp: BigNumberish,
      balance: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNumTokens(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      _streak: BigNumberish,
      balance: BigNumberish,
      daysStaked: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaysStaked(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimHoldersDay(overrides?: Overrides): Promise<void>;

    updateHoldersDay(
      _enableHoldersDay: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateTokenAddress(newToken: string, overrides?: Overrides): Promise<void>;

    updateCalculator(calc: string, overrides?: Overrides): Promise<void>;

    updateUseExternalCalcIterative(
      _useExternalCalcIterative: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateInflationAdjustmentFactor(
      _inflationAdjustmentFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateStreak(
      negative: boolean,
      _streak: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateMinStakeDurationDays(
      _minStakeDurationDays: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateMinStakes(
      _minStake: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateMinPercentIncrease(
      _minIncrease: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateEnableBurns(
      _enabledBurns: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateWhitelist(
      addr: string,
      reason: string,
      remove: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateUniWhitelist(
      addr: string,
      reason: string,
      remove: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateBlacklist(
      addr: string,
      fee: BigNumberish,
      remove: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateUniswapPair(addr: string, overrides?: Overrides): Promise<void>;

    updateEnableUniswapSellBurns(
      _enableDirectSellBurns: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateUniswapSellBurnPercent(
      _sellerBurnPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateFreeze(_enableFreeze: boolean, overrides?: Overrides): Promise<void>;

    updateNextStakingContract(
      nextContract: string,
      overrides?: Overrides
    ): Promise<void>;

    updateLiquidityStakingContract(
      _liquidityStakingContract: string,
      overrides?: Overrides
    ): Promise<void>;

    updateOracle(_oracle: string, overrides?: Overrides): Promise<void>;

    updatePreviousStakingContract(
      previousContract: string,
      overrides?: Overrides
    ): Promise<void>;

    updateTransferBurnFee(
      _transferBurnFee: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateMaxStreak(
      _maxStreak: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateMaxStakingDays(
      _maxStakingDays: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateHoldersDayRewardDenominator(
      _holdersDayRewardDenominator: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    updateIncreaseTransferFees(
      _increaseTransferFees: boolean,
      overrides?: Overrides
    ): Promise<void>;

    updateCheckPreviousContractWhitelist(
      _checkPreviousStakingContractWhitelist: boolean,
      overrides?: Overrides
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<void>;

    getStaker(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    removeLatestUpdate(overrides?: Overrides): Promise<void>;

    mulDiv(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    burn(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    liquidityRewards(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<void>;

    resetStakeTimeDebug(
      account: string,
      startTimestamp: BigNumberish,
      lastTimestamp: BigNumberish,
      migrated: boolean,
      overrides?: Overrides
    ): Promise<void>;
  };

  filters: {
    HoldersDayEnabled(): EventFilter;

    HoldersDayRewarded(Amount: null): EventFilter;

    MassiveCelebration(): EventFilter;

    Migration(StakerAddress: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    StakerAdded(StakerAddress: null): EventFilter;

    StakerRemoved(StakerAddress: null): EventFilter;

    StakesUpdated(Amount: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    blacklist(arg0: string): Promise<BigNumber>;
    checkPreviousStakingContractWhitelist(): Promise<BigNumber>;
    currentHoldersDayRewardedVersion(): Promise<BigNumber>;
    enableBurns(): Promise<BigNumber>;
    enableHoldersDay(): Promise<BigNumber>;
    enableUniswapDirectBurns(): Promise<BigNumber>;
    externalCalculator(): Promise<BigNumber>;
    freeze(): Promise<BigNumber>;
    holdersDayRewardDenominator(): Promise<BigNumber>;
    holdersDayRewarded(arg0: BytesLike): Promise<BigNumber>;
    increaseTransferFees(): Promise<BigNumber>;
    inflationAdjustmentFactor(): Promise<BigNumber>;
    lastNegativeUpdate(): Promise<BigNumber>;
    lastUpdate(): Promise<BigNumber>;
    liquidityStakingContract(): Promise<BigNumber>;
    maxStakingDays(): Promise<BigNumber>;
    maxStreak(): Promise<BigNumber>;
    minPercentIncrease(): Promise<BigNumber>;
    minStake(): Promise<BigNumber>;
    minStakeDurationDays(): Promise<BigNumber>;
    negativeStreak(): Promise<BigNumber>;
    nextStakingContract(): Promise<BigNumber>;
    numStakers(): Promise<BigNumber>;
    oracle(): Promise<BigNumber>;
    owner(): Promise<BigNumber>;
    previousStakingContract(): Promise<BigNumber>;
    priceTarget1Hit(): Promise<BigNumber>;
    priceTarget2Hit(): Promise<BigNumber>;
    stakers(arg0: string): Promise<BigNumber>;
    streak(): Promise<BigNumber>;
    token(): Promise<BigNumber>;
    transferBurnPercent(): Promise<BigNumber>;
    uniswapSellerBurnPercent(): Promise<BigNumber>;
    uniswapV2Pair(): Promise<BigNumber>;
    uniwhitelist(arg0: string): Promise<BigNumber>;
    updates(arg0: BigNumberish): Promise<BigNumber>;
    useExternalCalc(): Promise<BigNumber>;
    useExternalCalcIterative(): Promise<BigNumber>;
    whitelist(arg0: string): Promise<BigNumber>;
    updateState(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish
    ): Promise<BigNumber>;
    updateStateNegative(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish
    ): Promise<BigNumber>;
    resetStakeTimeMigrateState(addr: string): Promise<BigNumber>;
    migratePreviousState(): Promise<BigNumber>;
    updateMyStakes(
      stakerAddress: string,
      balance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<BigNumber>;
    iterativelyCalculateOwedRewards(
      stakerLastTimestamp: BigNumberish,
      stakerStartTimestamp: BigNumberish,
      balance: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish
    ): Promise<BigNumber>;
    calculateNumTokens(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      _streak: BigNumberish,
      balance: BigNumberish,
      daysStaked: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish
    ): Promise<BigNumber>;
    getDaysStaked(_staker: string): Promise<BigNumber>;
    claimHoldersDay(): Promise<BigNumber>;
    updateHoldersDay(_enableHoldersDay: boolean): Promise<BigNumber>;
    updateTokenAddress(newToken: string): Promise<BigNumber>;
    updateCalculator(calc: string): Promise<BigNumber>;
    updateUseExternalCalcIterative(
      _useExternalCalcIterative: boolean
    ): Promise<BigNumber>;
    updateInflationAdjustmentFactor(
      _inflationAdjustmentFactor: BigNumberish
    ): Promise<BigNumber>;
    updateStreak(negative: boolean, _streak: BigNumberish): Promise<BigNumber>;
    updateMinStakeDurationDays(
      _minStakeDurationDays: BigNumberish
    ): Promise<BigNumber>;
    updateMinStakes(_minStake: BigNumberish): Promise<BigNumber>;
    updateMinPercentIncrease(_minIncrease: BigNumberish): Promise<BigNumber>;
    updateEnableBurns(_enabledBurns: boolean): Promise<BigNumber>;
    updateWhitelist(
      addr: string,
      reason: string,
      remove: boolean
    ): Promise<BigNumber>;
    updateUniWhitelist(
      addr: string,
      reason: string,
      remove: boolean
    ): Promise<BigNumber>;
    updateBlacklist(
      addr: string,
      fee: BigNumberish,
      remove: boolean
    ): Promise<BigNumber>;
    updateUniswapPair(addr: string): Promise<BigNumber>;
    updateEnableUniswapSellBurns(
      _enableDirectSellBurns: boolean
    ): Promise<BigNumber>;
    updateUniswapSellBurnPercent(
      _sellerBurnPercent: BigNumberish
    ): Promise<BigNumber>;
    updateFreeze(_enableFreeze: boolean): Promise<BigNumber>;
    updateNextStakingContract(nextContract: string): Promise<BigNumber>;
    updateLiquidityStakingContract(
      _liquidityStakingContract: string
    ): Promise<BigNumber>;
    updateOracle(_oracle: string): Promise<BigNumber>;
    updatePreviousStakingContract(previousContract: string): Promise<BigNumber>;
    updateTransferBurnFee(_transferBurnFee: BigNumberish): Promise<BigNumber>;
    updateMaxStreak(_maxStreak: BigNumberish): Promise<BigNumber>;
    updateMaxStakingDays(_maxStakingDays: BigNumberish): Promise<BigNumber>;
    updateHoldersDayRewardDenominator(
      _holdersDayRewardDenominator: BigNumberish
    ): Promise<BigNumber>;
    updateIncreaseTransferFees(
      _increaseTransferFees: boolean
    ): Promise<BigNumber>;
    updateCheckPreviousContractWhitelist(
      _checkPreviousStakingContractWhitelist: boolean
    ): Promise<BigNumber>;
    transferOwnership(newOwner: string): Promise<BigNumber>;
    getStaker(_staker: string): Promise<BigNumber>;
    removeLatestUpdate(): Promise<BigNumber>;
    mulDiv(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish
    ): Promise<BigNumber>;
    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish
    ): Promise<BigNumber>;
    burn(account: string, amount: BigNumberish): Promise<BigNumber>;
    liquidityRewards(
      recipient: string,
      amount: BigNumberish
    ): Promise<BigNumber>;
    resetStakeTimeDebug(
      account: string,
      startTimestamp: BigNumberish,
      lastTimestamp: BigNumberish,
      migrated: boolean
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blacklist(arg0: string): Promise<PopulatedTransaction>;
    checkPreviousStakingContractWhitelist(): Promise<PopulatedTransaction>;
    currentHoldersDayRewardedVersion(): Promise<PopulatedTransaction>;
    enableBurns(): Promise<PopulatedTransaction>;
    enableHoldersDay(): Promise<PopulatedTransaction>;
    enableUniswapDirectBurns(): Promise<PopulatedTransaction>;
    externalCalculator(): Promise<PopulatedTransaction>;
    freeze(): Promise<PopulatedTransaction>;
    holdersDayRewardDenominator(): Promise<PopulatedTransaction>;
    holdersDayRewarded(arg0: BytesLike): Promise<PopulatedTransaction>;
    increaseTransferFees(): Promise<PopulatedTransaction>;
    inflationAdjustmentFactor(): Promise<PopulatedTransaction>;
    lastNegativeUpdate(): Promise<PopulatedTransaction>;
    lastUpdate(): Promise<PopulatedTransaction>;
    liquidityStakingContract(): Promise<PopulatedTransaction>;
    maxStakingDays(): Promise<PopulatedTransaction>;
    maxStreak(): Promise<PopulatedTransaction>;
    minPercentIncrease(): Promise<PopulatedTransaction>;
    minStake(): Promise<PopulatedTransaction>;
    minStakeDurationDays(): Promise<PopulatedTransaction>;
    negativeStreak(): Promise<PopulatedTransaction>;
    nextStakingContract(): Promise<PopulatedTransaction>;
    numStakers(): Promise<PopulatedTransaction>;
    oracle(): Promise<PopulatedTransaction>;
    owner(): Promise<PopulatedTransaction>;
    previousStakingContract(): Promise<PopulatedTransaction>;
    priceTarget1Hit(): Promise<PopulatedTransaction>;
    priceTarget2Hit(): Promise<PopulatedTransaction>;
    stakers(arg0: string): Promise<PopulatedTransaction>;
    streak(): Promise<PopulatedTransaction>;
    token(): Promise<PopulatedTransaction>;
    transferBurnPercent(): Promise<PopulatedTransaction>;
    uniswapSellerBurnPercent(): Promise<PopulatedTransaction>;
    uniswapV2Pair(): Promise<PopulatedTransaction>;
    uniwhitelist(arg0: string): Promise<PopulatedTransaction>;
    updates(arg0: BigNumberish): Promise<PopulatedTransaction>;
    useExternalCalc(): Promise<PopulatedTransaction>;
    useExternalCalcIterative(): Promise<PopulatedTransaction>;
    whitelist(arg0: string): Promise<PopulatedTransaction>;
    updateState(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateStateNegative(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish
    ): Promise<PopulatedTransaction>;
    resetStakeTimeMigrateState(addr: string): Promise<PopulatedTransaction>;
    migratePreviousState(): Promise<PopulatedTransaction>;
    updateMyStakes(
      stakerAddress: string,
      balance: BigNumberish,
      totalSupply: BigNumberish
    ): Promise<PopulatedTransaction>;
    iterativelyCalculateOwedRewards(
      stakerLastTimestamp: BigNumberish,
      stakerStartTimestamp: BigNumberish,
      balance: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish
    ): Promise<PopulatedTransaction>;
    calculateNumTokens(
      numerator: BigNumberish,
      denominator: BigNumberish,
      price: BigNumberish,
      volume: BigNumberish,
      _streak: BigNumberish,
      balance: BigNumberish,
      daysStaked: BigNumberish,
      stakerAddress: string,
      totalSupply: BigNumberish
    ): Promise<PopulatedTransaction>;
    getDaysStaked(_staker: string): Promise<PopulatedTransaction>;
    claimHoldersDay(): Promise<PopulatedTransaction>;
    updateHoldersDay(_enableHoldersDay: boolean): Promise<PopulatedTransaction>;
    updateTokenAddress(newToken: string): Promise<PopulatedTransaction>;
    updateCalculator(calc: string): Promise<PopulatedTransaction>;
    updateUseExternalCalcIterative(
      _useExternalCalcIterative: boolean
    ): Promise<PopulatedTransaction>;
    updateInflationAdjustmentFactor(
      _inflationAdjustmentFactor: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateStreak(
      negative: boolean,
      _streak: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateMinStakeDurationDays(
      _minStakeDurationDays: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateMinStakes(_minStake: BigNumberish): Promise<PopulatedTransaction>;
    updateMinPercentIncrease(
      _minIncrease: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateEnableBurns(_enabledBurns: boolean): Promise<PopulatedTransaction>;
    updateWhitelist(
      addr: string,
      reason: string,
      remove: boolean
    ): Promise<PopulatedTransaction>;
    updateUniWhitelist(
      addr: string,
      reason: string,
      remove: boolean
    ): Promise<PopulatedTransaction>;
    updateBlacklist(
      addr: string,
      fee: BigNumberish,
      remove: boolean
    ): Promise<PopulatedTransaction>;
    updateUniswapPair(addr: string): Promise<PopulatedTransaction>;
    updateEnableUniswapSellBurns(
      _enableDirectSellBurns: boolean
    ): Promise<PopulatedTransaction>;
    updateUniswapSellBurnPercent(
      _sellerBurnPercent: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateFreeze(_enableFreeze: boolean): Promise<PopulatedTransaction>;
    updateNextStakingContract(
      nextContract: string
    ): Promise<PopulatedTransaction>;
    updateLiquidityStakingContract(
      _liquidityStakingContract: string
    ): Promise<PopulatedTransaction>;
    updateOracle(_oracle: string): Promise<PopulatedTransaction>;
    updatePreviousStakingContract(
      previousContract: string
    ): Promise<PopulatedTransaction>;
    updateTransferBurnFee(
      _transferBurnFee: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateMaxStreak(_maxStreak: BigNumberish): Promise<PopulatedTransaction>;
    updateMaxStakingDays(
      _maxStakingDays: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateHoldersDayRewardDenominator(
      _holdersDayRewardDenominator: BigNumberish
    ): Promise<PopulatedTransaction>;
    updateIncreaseTransferFees(
      _increaseTransferFees: boolean
    ): Promise<PopulatedTransaction>;
    updateCheckPreviousContractWhitelist(
      _checkPreviousStakingContractWhitelist: boolean
    ): Promise<PopulatedTransaction>;
    transferOwnership(newOwner: string): Promise<PopulatedTransaction>;
    getStaker(_staker: string): Promise<PopulatedTransaction>;
    removeLatestUpdate(): Promise<PopulatedTransaction>;
    mulDiv(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish
    ): Promise<PopulatedTransaction>;
    transferHook(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      senderBalance: BigNumberish,
      recipientBalance: BigNumberish
    ): Promise<PopulatedTransaction>;
    burn(account: string, amount: BigNumberish): Promise<PopulatedTransaction>;
    liquidityRewards(
      recipient: string,
      amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    resetStakeTimeDebug(
      account: string,
      startTimestamp: BigNumberish,
      lastTimestamp: BigNumberish,
      migrated: boolean
    ): Promise<PopulatedTransaction>;
  };
}
