/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IChainlinkAggregatorContract
  extends Truffle.Contract<IChainlinkAggregatorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IChainlinkAggregatorInstance>;
}

export interface AnswerUpdated {
  name: "AnswerUpdated";
  args: {
    current: BN;
    roundId: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface NewRound {
  name: "NewRound";
  args: {
    roundId: BN;
    startedBy: string;
    0: BN;
    1: string;
  };
}

type AllEvents = AnswerUpdated | NewRound;

export interface IChainlinkAggregatorInstance extends Truffle.ContractInstance {
  latestAnswer(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  latestTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  latestRound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAnswer(
    roundId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTimestamp(
    roundId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    latestAnswer(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    latestTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    latestRound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAnswer(
      roundId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getTimestamp(
      roundId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
