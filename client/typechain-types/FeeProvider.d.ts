/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FeeProviderContract
  extends Truffle.Contract<FeeProviderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FeeProviderInstance>;
}

type AllEvents = never;

export interface FeeProviderInstance extends Truffle.ContractInstance {
  FEE_PROVIDER_REVISION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  originationFeePercentage(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * initializes the FeeProvider after it's added to the proxy
   * @param _addressesProvider the address of the LendingPoolAddressesProvider
   */
  initialize: {
    (
      _addressesProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _addressesProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _addressesProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addressesProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * calculates the origination fee for every loan executed on the platform.
   * @param _amount the amount of the loan*
   * @param _user can be used in the future to apply discount to the origination fee based on the _user account (eg. stake AAVE tokens in the lending pool, or deposit > 1M USD etc.)
   */
  calculateLoanOriginationFee(
    _user: string,
    _amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * returns the origination fee percentage*
   */
  getLoanOriginationFeePercentage(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    FEE_PROVIDER_REVISION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    originationFeePercentage(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * initializes the FeeProvider after it's added to the proxy
     * @param _addressesProvider the address of the LendingPoolAddressesProvider
     */
    initialize: {
      (
        _addressesProvider: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _addressesProvider: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _addressesProvider: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _addressesProvider: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * calculates the origination fee for every loan executed on the platform.
     * @param _amount the amount of the loan*
     * @param _user can be used in the future to apply discount to the origination fee based on the _user account (eg. stake AAVE tokens in the lending pool, or deposit > 1M USD etc.)
     */
    calculateLoanOriginationFee(
      _user: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * returns the origination fee percentage*
     */
    getLoanOriginationFeePercentage(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
