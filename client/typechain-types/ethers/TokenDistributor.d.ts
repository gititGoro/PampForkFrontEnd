/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenDistributorInterface extends ethers.utils.Interface {
  functions: {
    "DISTRIBUTION_BASE()": FunctionFragment;
    "IMPLEMENTATION_REVISION()": FunctionFragment;
    "KYBER_ETH_MOCK_ADDRESS()": FunctionFragment;
    "MAX_UINT()": FunctionFragment;
    "MAX_UINT_MINUS_ONE()": FunctionFragment;
    "MIN_CONVERSION_RATE()": FunctionFragment;
    "kyberProxy()": FunctionFragment;
    "recipientBurn()": FunctionFragment;
    "tokenToBurn()": FunctionFragment;
    "initialize(address,address,address,address[],uint256[],address[])": FunctionFragment;
    "distribute(address[])": FunctionFragment;
    "approveKyber(address[])": FunctionFragment;
    "getDistribution()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DISTRIBUTION_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KYBER_ETH_MOCK_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_UINT_MINUS_ONE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CONVERSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kyberProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recipientBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approveKyber",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistribution",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KYBER_ETH_MOCK_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UINT_MINUS_ONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CONVERSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kyberProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveKyber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistribution",
    data: BytesLike
  ): Result;

  events: {
    "Burn(uint256)": EventFragment;
    "Distributed(address,uint256,uint256)": EventFragment;
    "DistributionUpdated(address[],uint256[])": EventFragment;
    "Setup(address,address,address)": EventFragment;
    "Trade(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Setup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export class TokenDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenDistributorInterface;

  functions: {
    DISTRIBUTION_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    IMPLEMENTATION_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    KYBER_ETH_MOCK_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MAX_UINT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_UINT_MINUS_ONE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    kyberProxy(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    recipientBurn(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenToBurn(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Called by the proxy when setting this contract as implementation
     */
    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _kyberProxy: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    distribute(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * "Infinite" approval for all the tokens initialized
     * @param _tokens List of IERC20 to approve
     */
    approveKyber(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    getDistribution(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;
  };

  DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  IMPLEMENTATION_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT_MINUS_ONE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  kyberProxy(overrides?: CallOverrides): Promise<string>;

  recipientBurn(overrides?: CallOverrides): Promise<string>;

  tokenToBurn(overrides?: CallOverrides): Promise<string>;

  /**
   * Called by the proxy when setting this contract as implementation
   */
  initialize(
    _recipientBurn: string,
    _tokenToBurn: string,
    _kyberProxy: string,
    _receivers: string[],
    _percentages: BigNumberish[],
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Distributes a list of _tokens balances in this contract, depending on the distribution
   * @param _tokens list of ERC20 tokens to distribute
   */
  distribute(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * "Infinite" approval for all the tokens initialized
   * @param _tokens List of IERC20 to approve
   */
  approveKyber(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the receivers and percentages of the contract Distribution
   * @returns receivers array of addresses and percentages array on uints
   */
  getDistribution(
    overrides?: CallOverrides
  ): Promise<{
    receivers: string[];
    percentages: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  callStatic: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT_MINUS_ONE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    kyberProxy(overrides?: CallOverrides): Promise<string>;

    recipientBurn(overrides?: CallOverrides): Promise<string>;

    tokenToBurn(overrides?: CallOverrides): Promise<string>;

    /**
     * Called by the proxy when setting this contract as implementation
     */
    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _kyberProxy: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides
    ): Promise<void>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    distribute(_tokens: string[], overrides?: Overrides): Promise<void>;

    /**
     * "Infinite" approval for all the tokens initialized
     * @param _tokens List of IERC20 to approve
     */
    approveKyber(_tokens: string[], overrides?: Overrides): Promise<void>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    getDistribution(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;
  };

  filters: {
    Burn(amount: null): EventFilter;

    Distributed(receiver: null, percentage: null, amount: null): EventFilter;

    DistributionUpdated(receivers: null, percentages: null): EventFilter;

    Setup(
      tokenToBurn: null,
      kyberProxy: null,
      _recipientBurn: null
    ): EventFilter;

    Trade(from: string | null, fromAmount: null, toAmount: null): EventFilter;
  };

  estimateGas: {
    DISTRIBUTION_BASE(): Promise<BigNumber>;
    IMPLEMENTATION_REVISION(): Promise<BigNumber>;
    KYBER_ETH_MOCK_ADDRESS(): Promise<BigNumber>;
    MAX_UINT(): Promise<BigNumber>;
    MAX_UINT_MINUS_ONE(): Promise<BigNumber>;
    MIN_CONVERSION_RATE(): Promise<BigNumber>;
    kyberProxy(): Promise<BigNumber>;
    recipientBurn(): Promise<BigNumber>;
    tokenToBurn(): Promise<BigNumber>;
    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _kyberProxy: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[]
    ): Promise<BigNumber>;
    distribute(_tokens: string[]): Promise<BigNumber>;
    approveKyber(_tokens: string[]): Promise<BigNumber>;
    getDistribution(): Promise<BigNumber>;
  };

  populateTransaction: {
    DISTRIBUTION_BASE(): Promise<PopulatedTransaction>;
    IMPLEMENTATION_REVISION(): Promise<PopulatedTransaction>;
    KYBER_ETH_MOCK_ADDRESS(): Promise<PopulatedTransaction>;
    MAX_UINT(): Promise<PopulatedTransaction>;
    MAX_UINT_MINUS_ONE(): Promise<PopulatedTransaction>;
    MIN_CONVERSION_RATE(): Promise<PopulatedTransaction>;
    kyberProxy(): Promise<PopulatedTransaction>;
    recipientBurn(): Promise<PopulatedTransaction>;
    tokenToBurn(): Promise<PopulatedTransaction>;
    initialize(
      _recipientBurn: string,
      _tokenToBurn: string,
      _kyberProxy: string,
      _receivers: string[],
      _percentages: BigNumberish[],
      _tokens: string[]
    ): Promise<PopulatedTransaction>;
    distribute(_tokens: string[]): Promise<PopulatedTransaction>;
    approveKyber(_tokens: string[]): Promise<PopulatedTransaction>;
    getDistribution(): Promise<PopulatedTransaction>;
  };
}
