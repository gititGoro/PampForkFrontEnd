/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IKyberNetworkProxyInterfaceContract
  extends Truffle.Contract<IKyberNetworkProxyInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IKyberNetworkProxyInterfaceInstance>;
}

type AllEvents = never;

export interface IKyberNetworkProxyInterfaceInstance
  extends Truffle.ContractInstance {
  maxGasPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getUserCapInWei(
    user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getUserCapInTokenWei(
    user: string,
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  enabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  info(id: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getExpectedRate(
    src: string,
    dest: string,
    srcQty: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  tradeWithHint: {
    (
      src: string,
      srcAmount: number | BN | string,
      dest: string,
      destAddress: string,
      maxDestAmount: number | BN | string,
      minConversionRate: number | BN | string,
      walletId: string,
      hint: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      src: string,
      srcAmount: number | BN | string,
      dest: string,
      destAddress: string,
      maxDestAmount: number | BN | string,
      minConversionRate: number | BN | string,
      walletId: string,
      hint: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      src: string,
      srcAmount: number | BN | string,
      dest: string,
      destAddress: string,
      maxDestAmount: number | BN | string,
      minConversionRate: number | BN | string,
      walletId: string,
      hint: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      src: string,
      srcAmount: number | BN | string,
      dest: string,
      destAddress: string,
      maxDestAmount: number | BN | string,
      minConversionRate: number | BN | string,
      walletId: string,
      hint: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    maxGasPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getUserCapInWei(
      user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getUserCapInTokenWei(
      user: string,
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    enabled(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    info(id: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    tradeWithHint: {
      (
        src: string,
        srcAmount: number | BN | string,
        dest: string,
        destAddress: string,
        maxDestAmount: number | BN | string,
        minConversionRate: number | BN | string,
        walletId: string,
        hint: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        src: string,
        srcAmount: number | BN | string,
        dest: string,
        destAddress: string,
        maxDestAmount: number | BN | string,
        minConversionRate: number | BN | string,
        walletId: string,
        hint: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        src: string,
        srcAmount: number | BN | string,
        dest: string,
        destAddress: string,
        maxDestAmount: number | BN | string,
        minConversionRate: number | BN | string,
        walletId: string,
        hint: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        src: string,
        srcAmount: number | BN | string,
        dest: string,
        destAddress: string,
        maxDestAmount: number | BN | string,
        minConversionRate: number | BN | string,
        walletId: string,
        hint: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
