/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IReserveInterestRateStrategyContract
  extends Truffle.Contract<IReserveInterestRateStrategyInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IReserveInterestRateStrategyInstance>;
}

type AllEvents = never;

export interface IReserveInterestRateStrategyInstance
  extends Truffle.ContractInstance {
  /**
   * returns the base variable borrow rate, in rays
   */
  getBaseVariableBorrowRate(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * calculates the liquidity, stable, and variable rates depending on the current utilization rate     and the base parameters
   */
  calculateInterestRates(
    _reserve: string,
    _utilizationRate: number | BN | string,
    _totalBorrowsStable: number | BN | string,
    _totalBorrowsVariable: number | BN | string,
    _averageStableBorrowRate: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  methods: {
    /**
     * returns the base variable borrow rate, in rays
     */
    getBaseVariableBorrowRate(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * calculates the liquidity, stable, and variable rates depending on the current utilization rate     and the base parameters
     */
    calculateInterestRates(
      _reserve: string,
      _utilizationRate: number | BN | string,
      _totalBorrowsStable: number | BN | string,
      _totalBorrowsVariable: number | BN | string,
      _averageStableBorrowRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
