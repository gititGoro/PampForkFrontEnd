/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LendingPoolLiquidationManagerContract
  extends Truffle.Contract<LendingPoolLiquidationManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<LendingPoolLiquidationManagerInstance>;
}

export interface LiquidationCall {
  name: "LiquidationCall";
  args: {
    _collateral: string;
    _reserve: string;
    _user: string;
    _purchaseAmount: BN;
    _liquidatedCollateralAmount: BN;
    _accruedBorrowInterest: BN;
    _liquidator: string;
    _receiveAToken: boolean;
    _timestamp: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: string;
    7: boolean;
    8: BN;
  };
}

export interface OriginationFeeLiquidated {
  name: "OriginationFeeLiquidated";
  args: {
    _collateral: string;
    _reserve: string;
    _user: string;
    _feeLiquidated: BN;
    _liquidatedCollateralForFee: BN;
    _timestamp: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
  };
}

type AllEvents = LiquidationCall | OriginationFeeLiquidated;

export interface LendingPoolLiquidationManagerInstance
  extends Truffle.ContractInstance {
  addressesProvider(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * users can invoke this function to liquidate an undercollateralized position.
   * @param _purchaseAmount the amount of principal that the liquidator wants to repay
   * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
   * @param _reserve the address of the principal reserve
   * @param _user the address of the borrower
   */
  liquidationCall: {
    (
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: number | BN | string,
      _receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: number | BN | string,
      _receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string]>;
    sendTransaction(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: number | BN | string,
      _receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: number | BN | string,
      _receiveAToken: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addressesProvider(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall: {
      (
        _collateral: string,
        _reserve: string,
        _user: string,
        _purchaseAmount: number | BN | string,
        _receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateral: string,
        _reserve: string,
        _user: string,
        _purchaseAmount: number | BN | string,
        _receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, string]>;
      sendTransaction(
        _collateral: string,
        _reserve: string,
        _user: string,
        _purchaseAmount: number | BN | string,
        _receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateral: string,
        _reserve: string,
        _user: string,
        _purchaseAmount: number | BN | string,
        _receiveAToken: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
