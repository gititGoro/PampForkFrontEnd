/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ChainlinkProxyPriceProviderContract
  extends Truffle.Contract<ChainlinkProxyPriceProviderInstance> {
  "new"(
    _assets: string[],
    _sources: string[],
    _fallbackOracle: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ChainlinkProxyPriceProviderInstance>;
}

export interface AssetSourceUpdated {
  name: "AssetSourceUpdated";
  args: {
    asset: string;
    source: string;
    0: string;
    1: string;
  };
}

export interface FallbackOracleUpdated {
  name: "FallbackOracleUpdated";
  args: {
    fallbackOracle: string;
    0: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | AssetSourceUpdated
  | FallbackOracleUpdated
  | OwnershipTransferred;

export interface ChainlinkProxyPriceProviderInstance
  extends Truffle.ContractInstance {
  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * External function called by the Aave governance to set or replace sources of assets
   * @param _assets The addresses of the assets
   * @param _sources The address of the source of each asset
   */
  setAssetSources: {
    (
      _assets: string[],
      _sources: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _assets: string[],
      _sources: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _assets: string[],
      _sources: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _assets: string[],
      _sources: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets the fallbackOracle - Callable only by the Aave governance
   * @param _fallbackOracle The address of the fallbackOracle
   */
  setFallbackOracle: {
    (_fallbackOracle: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _fallbackOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fallbackOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fallbackOracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Gets an asset price by address
   * @param _asset The asset address
   */
  getAssetPrice(
    _asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Gets a list of prices from a list of assets addresses
   * @param _assets The list of assets addresses
   */
  getAssetsPrices(
    _assets: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Gets the address of the source for an asset address
   * @param _asset The address of the asset
   * @returns address The address of the source
   */
  getSourceOfAsset(
    _asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Gets the address of the fallback oracle
   * @returns address The addres of the fallback oracle
   */
  getFallbackOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * External function called by the Aave governance to set or replace sources of assets
     * @param _assets The addresses of the assets
     * @param _sources The address of the source of each asset
     */
    setAssetSources: {
      (
        _assets: string[],
        _sources: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _assets: string[],
        _sources: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _assets: string[],
        _sources: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _assets: string[],
        _sources: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets the fallbackOracle - Callable only by the Aave governance
     * @param _fallbackOracle The address of the fallbackOracle
     */
    setFallbackOracle: {
      (
        _fallbackOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _fallbackOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fallbackOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fallbackOracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Gets an asset price by address
     * @param _asset The asset address
     */
    getAssetPrice(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Gets a list of prices from a list of assets addresses
     * @param _assets The list of assets addresses
     */
    getAssetsPrices(
      _assets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Gets the address of the source for an asset address
     * @param _asset The address of the asset
     * @returns address The address of the source
     */
    getSourceOfAsset(
      _asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Gets the address of the fallback oracle
     * @returns address The addres of the fallback oracle
     */
    getFallbackOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
