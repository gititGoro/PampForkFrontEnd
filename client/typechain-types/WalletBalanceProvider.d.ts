/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WalletBalanceProviderContract
  extends Truffle.Contract<WalletBalanceProviderInstance> {
  "new"(
    _provider: string,
    meta?: Truffle.TransactionDetails
  ): Promise<WalletBalanceProviderInstance>;
}

type AllEvents = never;

export interface WalletBalanceProviderInstance
  extends Truffle.ContractInstance {
  /**
   * Check the token balance of a wallet in a token contract Returns the balance of the token for user. Avoids possible errors: - return 0 on non-contract address*
   */
  balanceOf(
    _user: string,
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * provides balances of user wallet for all reserves available on the pool
   */
  getUserWalletBalances(
    _user: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string[], BN[]]>;

  methods: {
    /**
     * Check the token balance of a wallet in a token contract Returns the balance of the token for user. Avoids possible errors: - return 0 on non-contract address*
     */
    balanceOf(
      _user: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * provides balances of user wallet for all reserves available on the pool
     */
    getUserWalletBalances(
      _user: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string[], BN[]]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
