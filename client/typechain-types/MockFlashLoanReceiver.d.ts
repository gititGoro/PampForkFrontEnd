/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockFlashLoanReceiverContract
  extends Truffle.Contract<MockFlashLoanReceiverInstance> {
  "new"(
    _provider: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MockFlashLoanReceiverInstance>;
}

export interface ExecutedWithFail {
  name: "ExecutedWithFail";
  args: {
    _reserve: string;
    _amount: BN;
    _fee: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface ExecutedWithSuccess {
  name: "ExecutedWithSuccess";
  args: {
    _reserve: string;
    _amount: BN;
    _fee: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents = ExecutedWithFail | ExecutedWithSuccess;

export interface MockFlashLoanReceiverInstance
  extends Truffle.ContractInstance {
  addressesProvider(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setFailExecutionTransfer: {
    (_fail: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_fail: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _fail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeOperation: {
    (
      _reserve: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reserve: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _reserve: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reserve: string,
      _amount: number | BN | string,
      _fee: number | BN | string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addressesProvider(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setFailExecutionTransfer: {
      (_fail: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _fail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeOperation: {
      (
        _reserve: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reserve: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _reserve: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reserve: string,
        _amount: number | BN | string,
        _fee: number | BN | string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
